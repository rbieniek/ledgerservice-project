version: "3.8"
services:
  postgres:
    image: postgres:14.5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: example
    volumes:
      - ./run/stack-files/postgres/db:/var/lib/postgresql/data
      - ./stack-files/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6.0.1
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - ./run/stack-files/mongo/db:/data/db
      - ./stack-files/mongodb:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "echo 'db.stats().ok' | mongosh -u root -p example --quiet" ]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s

# Mongo expres 0.54.0 does not support mongodb 6.x
#  mongo-express:
#    image: mongo-express:0.54.0
#    restart: always
#    ports:
#      - "8082:8081"
#    environment:
#      ME_CONFIG_MONGODB_ADMINUSERNAME: root
#      ME_CONFIG_MONGODB_ADMINPASSWORD: example
 #     ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
 #   depends_on:
 #     - mongo

  rabbitmq:
    image: rabbitmq:3.9.27
    volumes:
      - ./run/stack-files/rabbitmq/data:/var/lib/rabbitmq
      - ./run/stack-files/rabbitmq/work:/work
    ports:
      - "5671:5671"
      - "5672:5672"
      - "5551:5551"
      - "5552:5552"
      - "15671:15671"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 30s
      timeout: 30s
      retries: 10

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.2
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
      - KC_HEALTH_ENABLED=true
      - KC_METRICS_ENABLED=true
      - KC_HOSTNAME=localhost
    ports:
      - "8081:8080"
    entrypoint:
      - /opt/keycloak/bin/kc.sh
      - start-dev
      - "--import-realm"
    volumes:
      - ./run/stack-files/keycloak/export:/data/export
      - ./stack-files/keycloak/import:/opt/keycloak/data/import
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  minio:
    image: quay.io/minio/minio:RELEASE.2022-09-01T23-53-36Z.fips
    ports:
      - "9100:9000"
      - "9101:9001"
      - "34201:34201"
    command: "server --console-address ':34201' /data"
    environment:
      MINIO_ACCESS_KEY: "AKIAIOSFODNN7EXAMPLE"
      MINIO_SECRET_KEY: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    volumes:
      - ./run/stack-files/minio/data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.10.2
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536 # maximum number of open files for the OpenSearch user, set to at least 65536 on modern systems
        hard: 65536
    ports:
      - "9200:9200"
      - "9300:9300" # required for Performance Analyzer
    volumes:
      - ./run/stack-files/elasticsearch/data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  jaeger:
    image: jaegertracing/all-in-one:1.41.0
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "4317:4317"
      - "4318:4318"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:16686"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      elasticsearch:
        condition: service_healthy

  influxdb:
    image: influxdb:2.6.1
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: "setup"
      DOCKER_INFLUXDB_INIT_USERNAME: "influx-user"
      DOCKER_INFLUXDB_INIT_PASSWORD: "influx-password"
      DOCKER_INFLUXDB_INIT_ORG: "ledgerservice-org"
      DOCKER_INFLUXDB_INIT_BUCKET: "ledgerservice-bucket"
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "2b0c2328c5a88731cef2dfbf8ac054e7a3792a43a20a931cb7595fef68105d55"
    volumes:
      - ./run/stack-files/influxdb2:/var/lib/influxdb2
      - ./stack-files/influxdb2:/etc/influxdb2

  prometheus:
    image: prom/prometheus:v2.41.0
    ports:
      - "9090:9090"
    volumes:
      - ./run/stack-files/prometheus/data:/prometheus
      - ./stack-files/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml

  graylog:
    image: graylog/graylog:5.0
    environment:
      # CHANGE ME (must be at least 16 characters)!
      - GRAYLOG_PASSWORD_SECRET=somepasswordpepper
      # Password: admin
      - GRAYLOG_ROOT_PASSWORD_SHA2=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918
      - GRAYLOG_HTTP_EXTERNAL_URI=http://127.0.0.1:9000/
      - GRAYLOG_ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - GRAYLOG_MONGODB_URI=mongodb://graylog:gray123@mongo:27017/graylog
    ports:
      # Graylog web interface and REST API
      - 9000:9000
      # Syslog TCP
      - 1514:1514
      # Syslog UDP
      - 1514:1514/udp
      # GELF TCP
      - 12201:12201
      # GELF UDP
      - 12201:12201/udp
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      mongo:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy